You are given a two-dimensional array (matrix) of potentially unequal height and 
width containing letters; this matrix represents a boggle board. You are also 
given a list of words. Write a function that returns an array of all the words 
contained in the boggle board. A word is constructed in the boggle board by connecting 
adjacent (horizontally, vertically, or diagonally) letters, without using any single
letter at a given position more than once; while words can of course have repeated 
letters, those repeated letters must come from different positions in the boggle board 
in order for the word to be contained in the board. Note that two or more words are
allowed to overlap and use the same letters in the boggle board.

Input :["this", "is", "not", "a", "simple", "boggle", "board", "test", "REPEATED", "NOTRE-PEATED"]

Output : ["this", "is", "a", "simple", "boggle", "board", "NOTRE-PEATED"]

main(board,words)
// Create a trie with given words -> will make it easier to determine weather or not the word exist
const trie = new Trie(words)
const visited = // same height and with of boards -> all values will be set to be false, this will help to pervent using repeated letters

let result = []
let addedWords = {}
for(let i = 0; i < board.length; i++){
  for(let j = 0; j < board[i].length; j++){
    let letter = board[i][j]
    if(!(letter in trie.root)) continue
    explore(i,j,trie.root,visited,result,board,addedWords)
  }
}

return result


function explore(i,j,trie,visited,result,board,addedWords){
  let queue = [[i,j]]
  let node = trie
  while(queue.length > 0){
    let node = queue.shift()
    i = node[0]
    j = node[1]
    if(visited[i][j]) continue
    visited[i][j] = true
    if("*" in node){
      let currWord = node["*"]
      if(!(currWord in addedWords)){
        result.push(currWord)
        addedWords[currWord] = true
      }
    } 
    let letter = board[i][j]
    if(!(letter in node)) contine
    node = node[letter]
    let allNeighbors = getAllNeighbors(i,j,visited,board)
    for(let neighbor of allNeighbors){
      queue.push(neighbor)
    }
    visited[i][j] = false
  }
}



function explore(i,j,node,visited,result,board,addedWords){
  if(visited[i][j]) return
  visited[i][j] = true
  let letter = board[i][j]
  if("*" in node){
    let word = node["*"]
    if(!(word in addedWords)){
      addedWords[word] = true
      result.push(word)
    }
  }
  if(!(letter in node)) return
  let allNeighbors = getAllNeighbors(i,j,visited,board)
  for(let child of allNeighbors){
    explore(child[0],child[1],node[letter],result,board,addedWords)
  }
  visited[i][j] = false
  return result
}




function boogleBoard(board,words){
  let visited = []
  for(let i = 0; i < board.length; i ++){
      let row = []
    for(let j = 0; j < board[0].length; j++){
      row.push(false)
    }
    visited.push(row)
  }
  
  let trie = new Trie(words) // Helper Method
  let result = []
  let addedWords = {}
  
  for(let i = 0; i < board.length; i++){
    for(let j = 0; j < board[i].length; j++){
      let letter = board[i][j]
      if(!letter in trie.root) continue
      explore(i,j,board,visited,trie.root, addedWords, result)
    }
  }
  return result
}

function explore(i,j,board,visited,node, addedWords, result){
  if(visited[i][j]) return
  visited[i][j] = true
  if("*" in node){
    let word = node["*"]
    if(!(word in addedWords)){
      addedWords[word] = true
      result.push(word)
    }
  }
  let letter = board[i][j]
  if(!(letter in node)) return
  let allChildren = getAllChildren(i,j,board,visited) // Helper
  for(let child of allChildren){
    explore(child[0],child[1], board,visited,node[letter],addedWords,result)
  }
  visited[i][j] = false
  return result
}


class Trie {
  constructor(array){
    this.root = buildTrie(array)
  }
  
  buildTrie(array){
    let root = {}
    for(let word of array){
    let node = root
     this.addWord(word,node)
    }
    return root
  }
  
  addWord(word, node){
    for(let letter of word){
      if(!(letter in node)) node[letter] = {}
      node = node[letter]
    }
    node["*"] = word
  }
}

function getAllChildren(i,j,board,visited){
  let row = [i - 1, i + 1, i,i, i - 1, i + 1, i - 1, i + 1 ]
  let col = [j,j, j - 1, j + 1, j - 1, j - 1, j + 1, j + 1]
  let result = []
  for(let k = 0; k < row; k ++){  
    let rp = row[k]
    let cp = col[k]
    if(rp < 0 || rp >= board.length || cp < 0 || cp >= board[0].length) continue
    if(visited[rp][cp]) continue
    result.push([rp,cp])
  }
  return result
}











function boggleBoard(board,words){
  let visited = []
  for(let i = 0; i < board.length; i ++){
      let row = []
    for(let j = 0; j < board[0].length; j++){
      row.push(false)
    }
    visited.push(row)
  }
  
  let trie = new Trie(words) // Helper Method
  let result = []
  let addedWords = {}

  
  for(let i = 0; i < board.length; i++){
    for(let j = 0; j < board[i].length; j++){

      explore(i,j,board,visited,trie.root, addedWords)
    }
  }


  for(let key in addedWords){
    result.push(key)
  }

  return result
}

// function explore(i,j,board,visited,node, addedWords){
//   if(visited[i][j]) return
//   const letter = board[i][j]
//   if(!(letter in node)) return
//   visited[i][j] = true
//   node = node[letter];
//   if("*" in node) addedWords[node["*"]] = true
//   const children = getAllChildren(i,j,board,visited)
//   for(let child of children){
//     explore(child[0], child[1], board,visited,node,addedWords)
//   }
//   visited[i][j] = false
// }


class Trie {
  constructor(array){
    this.root = this.buildTrie(array)
  }
  
  buildTrie(array){
    let root = {}
    for(let word of array){
    let node = root
     this.addWord(word,node)
    }
    return root
  }
  
  addWord(word, node){
    for(let letter of word){
      if(!(letter in node)) node[letter] = {}
      node = node[letter]
    }
    node["*"] = word
  }
}
function explore(i,j,board,visited,node, addedWords){
  if(visited[i][j]) return
  let letter = board[i][j]
  if(!(letter in node)) return
  visited[i][j] = true
  node = node[letter]
  if("*" in node) addedWords[node["*"]] = true
  let allChildren = getAllChildren(i,j,board,visited) // Helper
  for(let child of allChildren){
    explore(child[0],child[1], board,visited,node,addedWords)
  }
  visited[i][j] = false
}

function getAllChildren(i,j,board,visited){
  let row = [i - 1, i + 1, i,i, i - 1, i + 1, i - 1, i + 1 ]
  let col = [j,j, j - 1, j + 1, j - 1, j - 1, j + 1, j + 1]
  let result = []
  for(let k = 0; k < row.length; k ++){  
    let rp = row[k]
    let cp = col[k]
    if(rp < 0 || rp >= board.length || cp < 0 || cp >= board[0].length) continue
    if(visited[rp][cp]) continue
    result.push([rp,cp])
  }
  return result
}


