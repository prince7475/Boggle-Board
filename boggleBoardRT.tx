function boggleBoard(board,words){
  let visited = board.map((arr) => arr.map((el) => false))
  let result = {}
  const trie = new Trie(words) // helper method
  
  for(let i = 0; i < board.length; i ++){
    for(let j = 0; j < board[0].length; j++){
      explore(i,j,board,visited,trie.root,result)
    }
  }
  return Object.keys(result)
}


function explore(i,j,board,visited,node,result){
  if(visited[i][j]) return
  let letter = board[i][j]
  if(!(letter in node)) return
  visited[i][j] = true
  node = node[letter]
  if("*" in node) result[node["*"]] = true
  let neighbors = getAllNeighbors(i,j,board,visited) // Helper method
  for(let neighbor of neighbors){
    explore(neighbor[0], neighbor[1], board,visited, node,result)
  }
  visited[i][j] = false
}

class Trie {
  constructor(array){
    this.root = this.buildTrie(array)
  }
  
  buildTrie(array){
    let root = {}
    for(let word of array){
      let node = root
      this.addWord(word,node)
    }
    return root
  }
  
  addWord(word,node){
    for(let letter of word){
      if(!(letter in node)) node[letter] = {}
      node = node[letter]
    }
    node["*"] = word
  }
}

function getAllNeighbors(i,j,board,visited){
  let row = [i - 1, i + 1, i, i, i - 1, i + 1, i - 1, i + 1]
  let col = [j, j, j - 1, j + 1, j - 1, j - 1, j + 1, j + 1]
  let result = []
  for(let k = 0; k < row.length; k++){
    let rp = row[k]
    let cp = col[k]
    if(rp < 0 || rp >= board.length || cp < 0 || cp >= board[0].length) continue
    if(visited[rp][cp]) continue
    result.push([rp,cp])
  }
  return result
}




main(board,words)
  const visted -> element : false -> the letter has been visited
  const result : hashMap, will prevent us from repeating words
  const trie -> contain all words in a trie DS
  
  loop through board
  for(let i =)

